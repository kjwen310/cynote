// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum ROLE {
  OWNER
  MEMBER
}

enum LOG_ACTION {
  CREATE
  UPDATE
  DELETE
}

enum LOG_TYPE {
  NOTE
  TASK
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  avatarImg String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  collaborators Collaborator[]
}

model Workspace {
  id          String   @id @default(uuid())
  title       String
  description String
  imageId     String
  imageSmUrl  String
  imageLgUrl  String
  inviteCode  String   @unique @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  collaborators Collaborator[]
  taskBoards    TaskBoard[]
  notes         Note[]
  historyLogs   HistoryLog[]
}

model Collaborator {
  id                  String     @id @default(uuid())
  displayName         String
  displayImage        String
  role                ROLE       @default(MEMBER)
  createdByTaskCards  TaskCard[] @relation("CreatedByTaskCards")
  assignedToTaskCards TaskCard[] @relation("AssignedToTaskCards")
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  notes       Note[]
  historyLogs HistoryLog[]
}

model TaskBoard {
  id         String   @id @default(uuid())
  title      String
  imageId    String
  imageSmUrl String
  imageLgUrl String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  workspaceId String
  workspace   Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  taskLists   TaskList[]
}

model TaskList {
  id        String   @id @default(uuid())
  title     String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  taskBoardId String
  taskBoard   TaskBoard  @relation(fields: [taskBoardId], references: [id], onDelete: Cascade)
  taskCards   TaskCard[]
}

model TaskCard {
  id          String   @id @default(uuid())
  title       String
  description String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  taskListId   String
  taskList     TaskList     @relation(fields: [taskListId], references: [id], onDelete: Cascade)
  createdById  String
  createdBy    Collaborator @relation("CreatedByTaskCards", fields: [createdById], references: [id], onDelete: Cascade)
  assignedToId String
  assignedTo   Collaborator @relation("AssignedToTaskCards", fields: [assignedToId], references: [id], onDelete: Cascade)
}

model Note {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workspaceId String
  workspace   Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  authorId    String
  author      Collaborator @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model HistoryLog {
  id                String     @id @default(uuid())
  targetId          String
  title             String
  action            LOG_ACTION
  type              LOG_TYPE
  collaboratorName  String
  collaboratorImage String
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  workspaceId    String
  workspace      Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  collaboratorId String
  collaborator   Collaborator @relation(fields: [collaboratorId], references: [id], onDelete: Cascade)
}
